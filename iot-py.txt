#!/usr/bin/env python3
# bp8.py -> working with major-minor, SMS, callphone, implement actuate
# increment with Ultrasonic sensor

# Send Grove sensor data periodically to AWS IoT.

import time
import datetime
import ssl
import json
import paho.mqtt.client as mqtt
import grovepi
import bluetooth
import blescan
import bluetooth._bluetooth as bluez

# LCD import
import time, sys
import RPi.GPIO as GPIO
import smbus

# LED import
from grovepi import *

buzzer = 8
grovepi.pinMode(buzzer, "OUTPUT")

# Connect the Grove LED to digital port D4
led = 4
grovepi.pinMode(led, "OUTPUT")

# TODO: Change this to the name of our Raspberry Pi, also known as our "Thing Name"
deviceName = "g56pi"

# Public certificate of our Raspberry Pi, as provided by AWS IoT.
deviceCertificate = "tp-iot-certificate.pem.crt"
# Private key of our Raspberry Pi, as provided by AWS IoT.
devicePrivateKey = "tp-iot-private.pem.key"
# Root certificate to authenticate AWS IoT when we connect to their server.
awsCert = "aws-iot-rootCA.crt"

isConnected = False

# Assume we connected the Grove Light Sensor to analog port A0,
# Digital Humidity/Temperature Sensor (DHT11) to digital port D2,
# Sound Sensor to A2, Grove LED to digital port D4.
# If you are using the Grove Analog Temperature Sensor, connect it to analog port A1.
light_sensor = 0
sound_sensor = 2
dht_sensor = 2
led = 4
temp_sensor = 1
ultrasonic_ranger = 7

#!/usr/bin/python

# begin of Ultrasonic sensor

# remember to change the GPIO values below to match your sensors
# GPIO output = the pin that's connected to "Trig" on the sensor
# GPIO input = the pin that's connected to "Echo" on the sensor

# alternate script

# This is the main logic of the program.  We connect to AWS IoT via MQTT, send sensor data periodically to AWS IoT,
# and handle any actuation commands received from AWS IoT.
def main():
	global isConnected, beacon, majorid, minorid, mac, payload

    # Create an MQTT client for connecting to AWS IoT via MQTT.
	client = mqtt.Client(deviceName + "_sr")  # Client ID must be unique because AWS will disconnect any duplicates.
	client.on_connect = on_connect  # When connected, call on_connect.
	client.on_message = on_message  # When message received, call on_message
	#client.on_log = on_log # When logging debug messages, call on_log.

    # Set the certificates and private key for connecting to AWS IoT.  TLS 1.2 is mandatory for AWS IoT and is supported
    # only in Python 3.4 and later, compiled with OpenSSL 1.0.1 and later.
	client.tls_set(awsCert, deviceCertificate, devicePrivateKey, ssl.CERT_REQUIRED, ssl.PROTOCOL_TLSv1_2)

    # Connect to AWS IoT server.  Use AWS command line "aws iot describe-endpoint" to get the address.
	print("1. Connecting to AWS IoT...")
	client.connect("A1P01IYM2DOZA0.iot.us-west-2.amazonaws.com", 8883, 60)

    # Start a background thread to process the MQTT network commands concurrently, including auto-reconnection.
	client.loop_start()

    # Loop forever.
	while True:
		try:
            # If we are not connected yet to AWS IoT, wait 1 second and try again.
            #           if not isConnected:
            #                time.sleep(1)
            #                print("not connected to AWS")
            #                continue             
			dev_id = 0
            #		try:
			sock = bluez.hci_open_dev(dev_id)
			print("ble thread started")

            #		except:
            #			print ("error accessing bluetooth device...")
            #    		sys.exit(1)

			blescan.hci_le_set_scan_parameters(sock)
			blescan.hci_enable_le_scan(sock)
            
            #		while True:
			returnedList = blescan.parse_events(sock, 30)
			print("----------")
			for beacon_long in returnedList:
                #print (beacon_long)
				beacon = (beacon_long[18:50])
				majorid = (beacon_long[51:56])
				minorid = (beacon_long[58:62])
				mac = (beacon_long[0:17])
				print(beacon)
				print(majorid)
				print(minorid)
				print(mac)
				break

                # Read Grove sensor values. Prepare our sensor data in JSON format.
			payload = {
					"state": 	{
                    	"reported": {
                        "cplot": "lot1",
                        "beacon": beacon,
                        "majorid": majorid,
                        "minorid": minorid,
                        "mac": mac,
                        "distance": grovepi.ultrasonicRead(ultrasonic_ranger),
                        "concat": beacon + " " + majorid + " " + minorid,
                        "timestamp": datetime.datetime.now().isoformat()
                    				}
                				}
            				}
			#print("Sending sensor data to AWS IoT...\n" +
			#	json.dumps(payload, indent=4, separators=(',', ': ')))
                
            # Publish our sensor data to AWS IoT via the MQTT topic, also known as updating our "Thing Shadow".
			client.publish("$aws/things/" + deviceName + "/shadow/update", json.dumps(payload))
			print("Sent to AWS IoT")

            # Wait 30 seconds before sending the next set of sensor data.
			time.sleep(6)

			#except KeyboardInterrupt:
			#	break
		except IOError:
			print("Error")

# This is called when we are connected to AWS IoT via MQTT.
# We subscribe for notifications of desired state updates.
def on_connect(client, userdata, flags, rc):
	global isConnected
	isConnected = True
	print("Connected to AWS IoT Actual Data")
    # Subscribe to our MQTT topic so that we will receive notifications of updates.
	topic = "$aws/things/" + deviceName + "/shadow/update/accepted"
	print("Subscribing to MQTT topic " + topic)
	client.subscribe(topic)

# This is called when we receive a subscription notification from AWS IoT.
def on_message(client, userdata, msg):
    # Convert the JSON payload to a Python dictionary.
    # The payload is in binary format so we need to decode as UTF-8.
    payload2 = json.loads(msg.payload.decode("utf-8"))
    print("Received message, topic: " + msg.topic + ", payload:\n" +
          json.dumps(payload2, indent=4, separators=(',', ': ')))

    # If there is a desired state in this message, then we actuate, e.g. if we see "led=on", we switch on the LED.
    if payload2.get("state") is not None and payload2["state"].get("desired") is not None:
        # Get the desired state and loop through all attributes inside.
        desired_state = payload2["state"]["desired"]
        for attribute in desired_state:
            # We handle the attribute and desired value by actuating.
            value = desired_state.get(attribute)
            actuate(client, attribute, value)

# Send the reported state of our actuator tp AWS IoT after it has been triggered, e.g. "led": "on".
def send_reported_state(client, attribute, value):
    # Prepare our sensor data in JSON format.
    payload = {
        "state": {
            "reported": {
                attribute: value,
                "timestamp": datetime.datetime.now().isoformat()
            }
        }
    }
    print("Sending sensor data to AWS IoT...\n" +
          json.dumps(payload, indent=4, separators=(',', ': ')))

    # Publish our sensor data to AWS IoT via the MQTT topic, also known as updating our "Thing Shadow".
    client.publish("$aws/things/" + deviceName + "/shadow/update", json.dumps(payload))
    print("Sent to AWS IoT")

    # Print out log messages for tracing.
    def on_log(client, userdata, level, buf):
        print("Log: " + buf)


# Control my actuators based on the specified attribute and value,
# e.g. "led=on" will switch on my LED.

def actuate(client, attribute, value):
	if attribute == "timestamp":
		# Ignore the timestamp attribute, it's only for info.
		return
	print("Setting " + attribute + " to " + value + "...")

	if attribute == "led":
		# We actuate the LED for "on", "off" or "flash1".
		if value == "on":
			# Switch on LED.
			grovepi.digitalWrite(led, 1)
			send_reported_state(client, "led", "on")
			return
		elif value == "off":
        	# Switch off LED.
			grovepi.digitalWrite(led, 0)
			send_reported_state(client, "led", "off")
			return
		elif value == "flash1":
			#Switch on LED, wait 1 second, switch it off.
			grovepi.digitalWrite(led, 1)
			send_reported_state(client, "led", "on")
			time.sleep(1)
			grovepi.digitalWrite(led, 0)
			send_reported_state(client, "led", "off")
			time.sleep(1)
			return
    # Show an error if attribute or value are incorrect.
		else:
			print("Error: Don't know how to set " + attribute + " to " + value)

    # here is the start of the buzzer part---------------------
    # Connect the Grove Buzzer to digital port D8
    # SIG,NC,VCC,GND

	if attribute == "buzzer":
		if value == "on":
            # Buzz for 8 second
			grovepi.digitalWrite(buzzer, 8)
			print('start buzzer')
			time.sleep(1)

            # Stop buzzing for 1 second and repeat
			grovepi.digitalWrite(buzzer, 0)
			print('stop')
			time.sleep(1)
            # except KeyboardInterrupt:
            #	grovepi.digitalWrite(buzzer,0)
            #	break
            # except IOError:
            #	print ("Error")        
		else:
			print("no buzzer actuated")

    # here is the end of the buzzer part------------------------

    # here is the start of the LCD part ------------------------
	if attribute == "lcd":
        # We actuate the lcd
		if value == "on":

            # this device has two I2C addresses
			DISPLAY_RGB_ADDR = 0x62
			DISPLAY_TEXT_ADDR = 0x3e

            # use the bus that matches your raspi version
			rev = GPIO.RPI_REVISION
			if rev == 2 or rev == 3:
				bus = smbus.SMBus(1)
			else:
				bus = smbus.SMBus(0)

                # set backlight to (R,G,B) (values from 0..255 for each)
		def setRGB(r, g, b):
			bus.write_byte_data(DISPLAY_RGB_ADDR, 0, 0)
			bus.write_byte_data(DISPLAY_RGB_ADDR, 1, 0)
			bus.write_byte_data(DISPLAY_RGB_ADDR, 0x08, 0xaa)
			bus.write_byte_data(DISPLAY_RGB_ADDR, 4, r)
			bus.write_byte_data(DISPLAY_RGB_ADDR, 3, g)
			bus.write_byte_data(DISPLAY_RGB_ADDR, 2, b)

        # send command to display (no need for external use)    
		def textCommand(cmd):
			bus.write_byte_data(DISPLAY_TEXT_ADDR, 0x80, cmd)

        # set display text \n for second line(or auto wrap)     
		def setText(text):
			textCommand(0x01)  # clear display
			time.sleep(.05)
			textCommand(0x08 | 0x04)  # display on, no cursor
			textCommand(0x28)  # 2 lines
			time.sleep(.05)
			count = 0
			row = 0
			for c in text:
				if c == '\n' or count == 16:
					count = 0
					row += 1
					if row == 2:
						break
					textCommand(0xc0)
					if c == '\n':
						continue
				count += 1
				bus.write_byte_data(DISPLAY_TEXT_ADDR, 0x40, ord(c))

		setText("Hello\n" + minorid + majorid)
		setRGB(0, 128, 64)
		for c in range(0, 255):
			setRGB(c, 255 - c, 0)
			time.sleep(0.1)
		setRGB(0, 255, 0)
		setText(minorid + majorid + "\nILLEGAL PARKER")

# here is the end of the LCD part----------------------

# Start the main program.
main()
